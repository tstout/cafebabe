(ns cafebabe.round-trip
  (:require [expectations :refer :all]
            [cafebabe.reader :refer [decode-class class-bytes]]
            [cafebabe.writer :refer [bytes-to-array class-to-file encode-class]]
            [cafebabe.class-codec :refer [class-codec]]
            [cafebabe.fixtures :refer [empty-class]]
            [gloss.io :refer [decode encode contiguous]]
            [digest :refer [md5]])
  (:import (cafebabe.prototypes Empty
                                PropsAndMethods
                                PropsOnly
                                HasThrowingMethod)))

;;
;; Verify that reading a class from a file (generated by javac) can
;; be decoded using our class codec and re-encoded using that codec
;; such that the resulting class file is identical to the original class file.
;;
(def proto-class-data
  [{:class-inst Empty :data (decode-class Empty)}
   {:class-inst PropsAndMethods :data (decode-class PropsAndMethods)}
   {:class-inst PropsOnly :data (decode-class PropsOnly)}
   {:class-inst HasThrowingMethod :data (decode-class HasThrowingMethod)}])

(doseq [c-data proto-class-data]
  (let [{:keys [class-inst data]} c-data
        c-bytes (encode-class data)
        c-file (class-bytes class-inst)]
    (println (str "Verifying chk-sum for " class-inst))
    (expect (not-empty data))
    (expect (md5 c-bytes) (md5 c-file))))









